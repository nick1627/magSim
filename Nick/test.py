"""
This is the testing script
"""
import sys
sys.path.insert(0, '../')

import numpy as np
import matplotlib.pyplot as plt
from fields import SHField
#import dataFunctions


import fields as f



#========================================================================================
# #Plotting field of Neptune since it's a bit less weird
# Rn = 24765000 #radius of neptune in metres
# #start with dipole only
# g = np.array([[0.09732, 0.03220]])
# h = np.array([[0, -0.09889]])

# NField = SHField(Rn, g, h, 0, 0)

# NField.plot3DField(-1.5*Rn, 1.5*Rn, -1.5*Rn, 1.5*Rn, -1.5*Rn, 1.5*Rn, scale = 100000000)
# #NField.plot2DField(np.array([Rn, 0, 0]), np.array([0, Rn, 0]), 6)

#========================================================================================

Ru = 25600000           #radius of Uranus in metres
g = np.array([[11278, 10928, 0], [-9648, -12284, 1453]])
h = np.array([[0, -16049, 0], [0, 6405, 4220]])

UField = SHField(Ru, g, h, 0, 0)

#Plot results of 16 points on the x=0 plane
x, y, z, u, v, w = UField.plot3DField(-1.5*Ru, 1.5*Ru, -1.5*Ru, 1.5*Ru, -1.5*Ru, 1.5*Ru, 4, Ru, planetaryFilter=False)
#x, y, z, u, v, w = UField.plot2DField("x", 0, 16, Ru/4, Ru)

# xH = np.array([[[-1.5, -1.5, -1.5, -1.5],
#   [-1.5, -1.5, -1.5, -1.5],
#   [-1.5, -1.5, -1.5, -1.5],
#   [-1.5, -1.5, -1.5, -1.5]],

#  [[-0.5, -0.5, -0.5, -0.5],
#   [-0.5, -0.5, -0.5, -0.5],
#   [-0.5, -0.5, -0.5, -0.5],
#   [-0.5, -0.5, -0.5, -0.5]],

#  [[ 0.5,  0.5,  0.5,  0.5],
#   [ 0.5,  0.5,  0.5,  0.5],
#   [ 0.5,  0.5,  0.5,  0.5],
#   [ 0.5,  0.5,  0.5,  0.5]],

#  [[ 1.5,  1.5,  1.5,  1.5],
#   [ 1.5,  1.5,  1.5,  1.5],
#   [ 1.5,  1.5,  1.5,  1.5],
#   [ 1.5,  1.5,  1.5,  1.5]]])

# yH = np.array([[[-1.5, -1.5, -1.5, -1.5],
#   [-0.5, -0.5, -0.5, -0.5],
#   [ 0.5,  0.5,  0.5,  0.5],
#   [ 1.5,  1.5,  1.5,  1.5]],

#  [[-1.5, -1.5, -1.5, -1.5],
#   [-0.5, -0.5, -0.5, -0.5],
#   [ 0.5,  0.5,  0.5,  0.5],
#   [ 1.5,  1.5,  1.5,  1.5]],

#  [[-1.5, -1.5, -1.5, -1.5],
#   [-0.5, -0.5, -0.5, -0.5],
#   [ 0.5,  0.5,  0.5,  0.5],
#   [ 1.5,  1.5,  1.5,  1.5]],

#  [[-1.5, -1.5, -1.5, -1.5],
#   [-0.5, -0.5, -0.5, -0.5],
#   [ 0.5,  0.5,  0.5,  0.5],
#   [ 1.5,  1.5,  1.5,  1.5]]])

# zH = np.array([[[-1.5, -0.5,  0.5,  1.5],
#   [-1.5, -0.5,  0.5,  1.5],
#   [-1.5, -0.5,  0.5,  1.5],
#   [-1.5, -0.5,  0.5,  1.5]],

#  [[-1.5, -0.5,  0.5,  1.5],
#   [-1.5, -0.5,  0.5,  1.5],
#   [-1.5, -0.5,  0.5,  1.5],
#   [-1.5, -0.5,  0.5,  1.5]],

#  [[-1.5, -0.5,  0.5,  1.5],
#   [-1.5, -0.5,  0.5,  1.5],
#   [-1.5, -0.5,  0.5,  1.5],
#   [-1.5, -0.5,  0.5,  1.5]],

#  [[-1.5, -0.5,  0.5,  1.5],
#   [-1.5, -0.5,  0.5,  1.5],
#   [-1.5, -0.5,  0.5,  1.5],
#   [-1.5, -0.5,  0.5,  1.5]]])

# uH = np.array([[[ 1.79626500e+03,  1.53782989e+03, -3.34210379e+02, -2.64641931e+02],
#   [ 4.95084756e+03,  9.32606851e+03, -5.05093406e+02, -4.83762558e+02],
#   [ 5.19344796e+03,  1.36558647e+04,  2.96597558e+03, -3.08142837e+02],
#   [ 2.20571159e+03,  3.88584717e+03,  1.76634346e+03,  1.11414979e+02]],

#  [[ 1.87675990e+03,  1.90482897e+03, -9.06031705e+02, -8.44603998e+01],
#   [ 7.05609982e+03,  7.06954154e+04, -2.67835785e+04,  7.85263311e+02],
#   [ 2.15930336e+03,  9.32975962e+04, -6.88596148e+03, -8.01089172e+02],
#   [ 4.98765111e+02,  1.43137344e+03, -1.92088592e+02, -3.38273796e+02]],

#  [[ 5.02686481e+02,  3.54325366e+03,  2.08191169e+03,  2.53593129e+02],
#   [-5.07915098e+03,  3.17263927e+04, -2.31395311e+04, -1.41480567e+03],
#   [-6.77740666e+03, -6.01581873e+04, -1.14531194e+04, -2.85127684e+02],
#   [-2.75579560e+03, -6.83248917e+03, -3.34285214e+03, -5.55584136e+02]],

#  [[ 3.63320586e+02,  2.35573802e+03,  2.01534194e+03,  5.43426065e+02],
#   [-9.74283331e+02,  5.56500058e+03,  3.54597514e+03,  5.26108251e+01],
#   [-2.61217023e+03, -7.49049353e+00,  8.78337190e+02, -3.27133323e+02],
#   [-1.86084972e+03, -2.27349917e+03, -1.17526974e+03, -4.02090024e+02]]])

# vH = np.array([[[ 1.79626500e+03,  1.53782989e+03, -3.34210379e+02, -2.64641931e+02],
#   [ 4.95084756e+03,  9.32606851e+03, -5.05093406e+02, -4.83762558e+02],
#   [ 5.19344796e+03,  1.36558647e+04,  2.96597558e+03, -3.08142837e+02],
#   [ 2.20571159e+03,  3.88584717e+03,  1.76634346e+03,  1.11414979e+02]],

#  [[ 1.87675990e+03,  1.90482897e+03, -9.06031705e+02, -8.44603998e+01],
#   [ 7.05609982e+03,  7.06954154e+04, -2.67835785e+04,  7.85263311e+02],
#   [ 2.15930336e+03,  9.32975962e+04, -6.88596148e+03, -8.01089172e+02],
#   [ 4.98765111e+02,  1.43137344e+03, -1.92088592e+02, -3.38273796e+02]],

#  [[ 5.02686481e+02,  3.54325366e+03,  2.08191169e+03,  2.53593129e+02],
#   [-5.07915098e+03,  3.17263927e+04, -2.31395311e+04, -1.41480567e+03],
#   [-6.77740666e+03, -6.01581873e+04, -1.14531194e+04, -2.85127684e+02],
#   [-2.75579560e+03, -6.83248917e+03, -3.34285214e+03, -5.55584136e+02]],

#  [[ 3.63320586e+02,  2.35573802e+03,  2.01534194e+03,  5.43426065e+02],
#   [-9.74283331e+02,  5.56500058e+03,  3.54597514e+03,  5.26108251e+01],
#   [-2.61217023e+03, -7.49049353e+00,  8.78337190e+02, -3.27133323e+02],
#   [-1.86084972e+03, -2.27349917e+03, -1.17526974e+03, -4.02090024e+02]]])

# wH = np.array([[[-6.04868018e+02, -1.95934160e+03, -3.33202795e+02,  7.76910085e+02],
#   [ 1.42255356e+03, -3.99311465e+03, -1.89772570e+03,  9.62388086e+02],
#   [ 3.55199648e+03, -1.76127210e+03, -5.09458885e+03, -5.49613815e+02],
#   [ 1.72160039e+03, -6.37321550e+02, -2.65262757e+03, -1.17468864e+03]],

#  [[-1.78535851e+03, -5.44700420e+03,  2.37197497e+03,  2.36868340e+03],
#   [ 5.42417918e+03, -3.32257189e+04,  4.71611263e+04,  4.27983198e+03],
#   [ 1.47119284e+04,  5.63820146e+04, -1.20821627e+04,  4.60532824e+02],
#   [ 3.89888061e+03, -3.41010908e+02, -5.62908015e+03, -1.46323265e+03]],

#  [[-3.02544570e+03, -5.03391589e+03,  3.80967715e+03,  2.42459487e+03],
#   [-2.94618238e+03, -7.09854544e+04,  2.66856026e+04,  2.16238071e+03],
#   [ 4.75203255e+03, -3.13925358e+04,  1.74571284e+04, -6.73841079e+01],
#   [ 1.95470377e+03, -1.51745693e+03, -2.60184363e+03, -7.03231527e+02]],

#  [[-1.90188977e+03, -1.65089130e+03,  1.27124616e+03,  1.35497802e+03],
#   [-3.00179767e+03, -4.34338405e+03,  4.00491520e+03,  1.83421214e+03],
#   [-1.57644440e+03, -3.70107584e+03,  2.39758638e+03,  1.02629989e+03],
#   [-1.92888213e+02, -1.03296091e+03, -3.44088966e+02,  2.08461458e+01]]])

# xcheck = x/Ru - xH
# ycheck = y/Ru - yH
# zcheck = z/Ru - zH
# ucheck = u - uH
# vcheck = v - vH
# wcheck = w - wH

# print(xcheck)
# print(ycheck)
# print(zcheck)
# print(ucheck)
# print(vcheck)
# print(wcheck)


#dataFunctions.saveBField(x, y, z, u, v, w, "../Output/quadrupole_nick")




print(x/Ru)
print(y/Ru)
print(z/Ru)
print(u)
print(v)
print(w)











#========================================================================================

# Ru = 25600000           #radius of Uranus in metres
# g = np.array([[0, 0, 0], [1, 0, 0]])
# h = np.array([[0, 0, 0], [0, 0, 0]])



# UField = SHField(Ru, g, h, 0, 0)

# #Plot results of 16 points on the x=0 plane
# #x, y, z, u, v, w = UField.plot3DField(-1.5*Ru, 1.5*Ru, -1.5*Ru, 1.5*Ru, -1.5*Ru, 1.5*Ru, 4, Ru, planetaryFilter=False)
# x, y, z, u, v, w = UField.plot2DField("x", 0, 20, Ru*(3/19), Ru)

# #print(x/Ru)
# # print(y/Ru)
# # print(z/Ru)
# # print(u)
# # print(v)
# # print(w)



#plt.show()